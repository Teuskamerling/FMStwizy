%%***************************************************************************************
%% file         sfcn_controller_error_readerror.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2019 (c) by HAN Automotive     http://www.han.nl     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% Permission is hereby granted, free of charge, to any person obtaining a copy of this
%% software and associated documentation files (the "Software"), to deal in the Software
%% without restriction, including without limitation the rights to use, copy, modify, merge,
%% publish, distribute, sublicense, and/or sell copies of the Software, and to permit
%% persons to whom the Software is furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all copies or
%% substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
%% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
%% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
%% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
%% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%% DEALINGS IN THE SOFTWARE.
%%
%%***************************************************************************************
%implements  sfcn_controller_error_readerror "C"

%% add required include files
%<LibAddToCommonIncludes("errorcodes.h")>


%% Function: BlockTypeSetup ==========================================================
%%
%% Purpose:
%%      Code generation for configuration
%%
%function BlockTypeSetup(block, system) void
  %% get the name of the model's source file.
  %assign srcFile = LibGetModelDotCFile()

  %% create a buffer that can be used for storing error data
  %<LibSetSourceFileSection(srcFile, "Declarations", "static tErrCodeData errCodesReadError;\n")>
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation for signal output
%%
%function Outputs(block, system) Output
%%
{
  %% read total number of registered errors
  %if ISEQUAL(CAST("Number",block.RTWdata.eeprom), 0)
  %<LibBlockOutputSignal(0, "", "", 0)> = ErrCodesGetNumActiveErrors(); 
  %else
  %<LibBlockOutputSignal(0, "", "", 0)> = ErrCodesGetNumSavedErrors(); 
  %endif

  %% check if the specified error number is valid, after converting it to index.
  %% note that this automatically also works if the input was 0 due to underflow.
  if ((%<LibBlockInputSignal(0, "", "", 0)> - 1) >= ERRCODES_NUM_OF_MAX_ERRORS)
  {
    %% not a valid error number so this error is not set
    %<LibBlockOutputSignal(1, "", "", 0)> = 0;
    %<LibBlockOutputSignal(2, "", "", 0)> = 0;
    %<LibBlockOutputSignal(3, "", "", 0)> = 0;
    %<LibBlockOutputSignal(4, "", "", 0)> = 0;
  }
  else
  {
    %% read the error info
    %if ISEQUAL(CAST("Number",block.RTWdata.eeprom), 0)
    if (ErrCodesGetActiveErrors(&errCodesReadError, (%<LibBlockInputSignal(0, "", "", 0)> - 1), 1) > 0)
    %else
    if (ErrCodesGetSavedErrors(&errCodesReadError, (%<LibBlockInputSignal(0, "", "", 0)> - 1), 1) > 0)
    %endif
    {
      %% error is set so read it
      %<LibBlockOutputSignal(1, "", "", 0)> = errCodesReadError.code;
      %<LibBlockOutputSignal(2, "", "", 0)> = errCodesReadError.param;
      %<LibBlockOutputSignal(3, "", "", 0)> = errCodesReadError.occurrence;
      %<LibBlockOutputSignal(4, "", "", 0)> = errCodesReadError.timestamp;
    }
    else
    {
      %% error is not set
      %<LibBlockOutputSignal(1, "", "", 0)> = 0;
      %<LibBlockOutputSignal(2, "", "", 0)> = 0;
      %<LibBlockOutputSignal(3, "", "", 0)> = 0;
      %<LibBlockOutputSignal(4, "", "", 0)> = 0;
    }
  }
}
    %%
%endfunction

%%******************************* end of sfcn_controller_error_readerror.tlc ************
